@model InventoryManagerment.Models.EF.ExportForm
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    var listProduct = (List<InventoryManagerment.Models.EF.Product>)ViewBag.Product;
    var listUnit = (List<InventoryManagerment.Models.EF.Unit>)ViewBag.Unit;
    var listCustomer = (List<InventoryManagerment.Models.EF.Customer>)ViewBag.Customer;
    var db = new InventoryManagerment.Models.EF.InventoryDbContext();
    string GetProductName(string code)
    {
        var product = db.Products.Where(x => x.Code == code).FirstOrDefault();
        return db.ProductCategories.Find(product.CategoryID).Name + " | "+product.Name + " | " + db.Packages.Find(product.PackageID).Name;
    }
    string GetUnitName(long id)
    {
        if (id == 0)
        {
            return "Chưa set đơn vị tính";
        }
        else
        {
            var product = db.Units.Find(id);
            return product.Name;
        }
    }
    //string addListProduct()
    //{
    //    System.Text.StringBuilder sb = new System.Text.StringBuilder();
    //    sb.Append("<script>");
    //    sb.Append(" var dataProduct = new Array();");
    //    foreach (var item in listProduct)
    //    {
    //        sb.Append($" dataProduct.push('{item.Name}');");
    //    }
    //    sb.Append(" </script>");
    //    return sb.ToString();
    //}
    //string addProductModel()
    //{
    //    System.Text.StringBuilder sb = new System.Text.StringBuilder();
    //    sb.Append("<script>");
    //    sb.Append(" var listProduct = new Array();");
    //    foreach (var item in listProduct)
    //    {
    //        var quantity = item.Quantity;
    //        foreach (var items in Model.exportDetails)
    //        {
    //            if (item.Code == items.ProductCode)
    //            {
    //                quantity += items.Quantity;
    //            }
    //        }
    //        sb.Append(" var ModelProduct = {};");
    //        sb.Append($" ModelProduct.Name ='{item.Name}';");
    //        sb.Append($" ModelProduct.CodeProduct='{item.Code}';");
    //        sb.Append($" ModelProduct.Quantity='{quantity}';");
    //        sb.Append($" ModelProduct.Price ='{item.Price}';");
    //        sb.Append($" ModelProduct.UnitID ='{item.UnitID}';");
    //        sb.Append($" listProduct.push(ModelProduct);");
    //    }
    //    sb.Append(" </script>");
    //    return sb.ToString();
    //}
    //string addListCustomer()
    //{
    //    System.Text.StringBuilder sb = new System.Text.StringBuilder();
    //    sb.Append("<script>");
    //    sb.Append(" var dataCustomer = new Array();");
    //    foreach (var item in listCustomer)
    //    {
    //        sb.Append($" dataCustomer.push('{item.Name}');");
    //    }
    //    sb.Append(" </script>");
    //    return sb.ToString();
    //}
    //string addCustomerModel()
    //{
    //    System.Text.StringBuilder sb = new System.Text.StringBuilder();
    //    sb.Append("<script>");
    //    sb.Append("var listCustomer = new Array();");
    //    foreach (var item in listCustomer)
    //    {
    //        sb.Append(" var ModelCustomer = {};");
    //        sb.Append($" ModelCustomer.Name = '{item.Name}';");
    //        sb.Append($" ModelCustomer.Code = '{item.CustomerCode}';");
    //        sb.Append($" ModelCustomer.Address = '{item.Address}';");
    //        sb.Append($" ModelCustomer.Phone = '{item.Phone}';");
    //        sb.Append($"listCustomer.push(ModelCustomer);");
    //    }
    //    sb.Append("</script>");
    //    return sb.ToString();
    //}
}
<div class="row">
    <h6>@TempData[InventoryManagerment.Common.CommonConstants.PAGE_NAME]</h6>
    <div class="input-group input-group-static my-3">
        <label>Ngày nhập</label>
        <input type="datetime-local" id="txtTime" name="txtTime" class="form-control" />
    </div>
    <div class="input-group input-group-static my-3 is-filled">
        <label>Khách hàng</label>
        <input disabled id="txtCustomerName" type="text" class="form-control" placeholder="Nhập tên khách hàng" value="@db.Customers.Where(x=>x.CustomerCode == Model.Export.CustomerCode).FirstOrDefault().Name"/>
        <span onclick="showInfo()" style="cursor:pointer;" class="input-group-text" id="basic-addon2"><a href="javascript:;" data-bs-toggle="modal" data-bs-target="#exampleModal"><i title="tooltip" id="btnShowInfo" class="material-icons opacity-10">infor</i></a></span>
        <!-- Modal -->
        <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title font-weight-normal" id="exampleModalLabel"><i title="tooltip" id="btnShowInfo" class="material-icons opacity-10">person</i>Thông tin khách hàng</h5>
                        <button type="button" class="btn-close text-dark" data-bs-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div id="modalBody" class="modal-body">

                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="input-group input-group-static my-3">
        <label>Trạng thái</label>
        <select disabled id="txtStatus" class="form-control">
            <option value="null">Chọn trạng thái</option>
            <option value="True">Đã duyệt</option>
            <option value="False">Chưa duyệt</option>
        </select>
    </div>
    <div class="input-group input-group-static my-3">
        <label>Ghi chú</label>
        <textarea id="txtNote" name="txtNote" class="form-control" rows="5" placeholder="Nhập ghi chú"></textarea>
    </div>
</div>
<div class="row">
    <h6>Thêm sản phẩm</h6>
    <div class="col-md-4">
        <div class="input-group input-group-dynamic my-3">
            <input class="form-control" type="text" placeholder="Nhập tên sản phẩm" id="txtProductName" />
        </div>
    </div>
    <div class="col-md-3">
        <div class="input-group input-group-dynamic my-3">
            <input type="number" value="" name="quantityProduct" placeholder="Số lượng" id="txtQuantity" class="form-control" />
        </div>
    </div>
    <div class="col-md-3">
        <div class="input-group input-group-dynamic my-3">
            <select id="txtUnit" class="form-control">
                <option value="null">Chọn đơn vị tính</option>
                @foreach (var item in listUnit)
                {
                    <option value="@item.ID">@item.Name</option>
                }
            </select>
        </div>
    </div>
    <div class="col-md-2">
        <input type="button" id="btnAddProduct" class="btn btn-primary" value="Thêm sản phẩm" />
    </div>
</div>
<div class="row">
    <h6>Danh sách sản phẩm</h6>
    <div class="card-body px-0 pb-2">
        <div class="table-responsive p-0    ">
            <table class="table align-items-center mb-0" id="tableProductRecord">
                <thead>
                    <tr>
                        <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Tên sản phẩm</th>
                        <th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Số lượng</th>
                        <th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Đơn vị tính</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.exportDetails)
                    {
                        <tr>
                            <td class="text-sm" id="@item.ProductCode">@GetProductName(item.ProductCode)</td>
                            <td class="align-middle text-center text-sm">@item.Quantity</td>
                            <td class="align-middle text-center text-sm" id="@item.UnitID">@GetUnitName(item.UnitID)</td>
                            <td><a class="editproduct" href="javascript:;" onclick="editproduct(this)"><i class="material-icons">edit</i></a><a href="javascript:;" onclick="this.closest('tr').remove()"><i class="material-icons">delete</i></a></td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>
<div class="row col-sm-2">
    <input type="button" id="btnSave" name="SaveData" value="Cập nhật phiếu xuất" class="btn btn-success" />
</div>
@section jsFooter{
    @*@Html.Raw(addProductModel())
    @Html.Raw(addListCustomer());
    @Html.Raw(addCustomerModel());*@
<script>
        var dataProduct = [];
        var nameCodeProduct = [];
        var dataCustomer = [];
        var nameCustomers = [];
        var nameProducts = [];
        $(document).ready(function () {
            SetAutoComplete();
            setTime();
            $("#btnSave").click(function () {
                SaveProduct();
            });
            $('#txtStatus option[value=@Model.Export.Status]').attr('selected', 'selected');
            $("#btnAddProduct").click(function () {
                AddProductRecord();
            });
            $('#txtProductName').focusout(function () {
                var name = $('#txtProductName').val();
                var codeCurrentProduct = "";
                for (let i = 0; i < nameCodeProduct.length; i++) {
                    if (nameCodeProduct[i].Name == name.trim()) {
                        codeCurrentProduct = nameCodeProduct[i].ProductCode;
                        break;
                    }
                }
                if (name.trim().length != 0) {
                    if (codeCurrentProduct.trim().length != 0) {
                        var product = GetProduct(codeCurrentProduct);
                        $("#txtPrice").val(product.Price);
                        $("#txtUnit").val(product.UnitID);
                        $("#txtQuantity").focus();
                    }
                    else {
                        $.confirm({
                            title: 'Thông báo',
                            content: 'Sản phẩm bạn vừa nhập không tồn tại, vui lòng kiểm tra lại',
                            buttons: {
                                confirm:
                                {
                                    text: 'Điều chỉnh tên sản phẩm',
                                    action: function () {
                                        $("#txtQuantity").val("");
                                        $("#txtPrice").val("");
                                        $("#txtUnit").val(0);
                                        $("#txtProductName").focus();
                                    }
                                },
                                remove: {
                                    text: 'Xóa tên sản phẩm',
                                    action: function () {
                                        $("#txtProductName").val("");
                                        $("#txtQuantity").val("");
                                        $("#txtPrice").val("");
                                        $("#txtUnit").val(0);
                                        $("#txtProductName").focus();
                                    }
                                }
                            }
                        });
                    }
                }
            });
            $('#txtCustomerName').focusout(function () {
                var name = $("#txtCustomerName").val();
                if (jQuery.inArray(name.trim(), nameCustomers) != -1 && text != "") {
                    $('#txtCustomerName').val(name.trim());
                } else {
                    $.confirm({
                        title: 'Thông báo!',
                        content: 'Vì đây là chỉnh sửa phiếu xuất nên vui lòng nhập tên khách hàng có tồn tại!',
                        buttons: {
                            confirm: {
                                text: 'Đồng ý',
                                action: function () {
                                    $('#txtCustomerName').focus();
                                }
                            }
                        }
                    });
                }
            });
        });
        function SetAutoComplete() {
            dataProduct = [];
            dataCustomer = [];
            nameCustomers = [];
            nameProducts = [];
            $.get("/Export/SetAutoComplete/", "", function (data) {
                $.each(data.ListCustomers, function (index, value) {
                    dataCustomer.push(value);
                    nameCustomers.push(value.Name);
                })
                $.each(data.ListProducts, function (index, value) {
                    nameCodeProduct.push(value);
                    nameProducts.push(value.Name)
                });
                $.each(data.DataProducts, (i, value) => {
                    dataProduct.push(value);
                })
                AutoComplete(nameProducts, $('#txtProductName'));
                AutoComplete(nameCustomers, $('#txtCustomerName'));
            })
        }
        function AddProductRecord() {
            if ($('#txtProductName').val().length == 0) {
                $.alert('Vui lòng nhập sản phẩm');
                $('#txtProductName').focus();
                return;
            }
            if ($("#txtQuantity").val().length == 0 || parseInt($("#txtQuantity").val()) == 0) {
                $.alert('Vui lòng nhập số lượng');
                $('#txtQuantity').focus();
                return
            }
            if ($("#txtUnit option:selected").val() == 'null') {
                $.alert('Vui lòng chọn đơn vị tính');
                $('#txtUnit').focus();
                return;
            }
            var temp = 0;
            $("#tableProductRecord tbody tr").each(function () {
                var name = $("#txtProductName").val();
                if ($(this).find("td:eq(0)").html() == name) {
                    temp += 1;
                }
            });
            if (temp > 0) {
                $.alert('Sản phẩm này đã tồn tại vui lòng kiểm tra lại');
                $('#txtProductName').focus();
                return;
            }
            var name = $('#txtProductName').val();
            var productCode = "";
            for (let i = 0; i < nameCodeProduct.length; i++) {
                if (nameCodeProduct[i].Name == name.trim()) {
                    productCode = nameCodeProduct[i].ProductCode;
                    break;
                }
            }
            var product = GetProduct(productCode);
            var quantity = $("#txtQuantity").val();
            var unit = $("#txtUnit option:selected").text();
            var unitID = $("#txtUnit option:selected").val();
            if (parseInt(product.Quantity) < parseInt(quantity) && parseInt(product.Quantity) != 0) {
                $.confirm({
                    title: 'Thông báo!',
                    content: 'Sản phẩm không đủ số lượng trong kho! Sản phẩm chỉ còn ' + product.Quantity + '',
                    buttons: {
                        confirm: {
                            text: 'Quay lại',
                            action: function () {
                                $("#txtQuantity").val(product.Quantity);
                                $("#txtQuantity").focus;
                            }
                        }
                    }
                });
            }
            else if (parseInt(product.Quantity) == 0) {
                $.confirm({
                    title: 'Thông báo!',
                    content: 'Sản phẩm này trong kho đã hết',
                    buttons: {
                        confirm: {
                            text: 'Quay lại',
                            action: function () {
                                $("#txtQuantity").val(product.Quantity);
                                $("#txtQuantity").focus;
                            }
                        }
                    }
                });
            }
            else {
                var productRecord = "<tr><td class=\"text-sm\"  id=" + productCode + ">" + name + "</td>" +
                    "<td class=\"align-middle text-center text-sm\">" + quantity + "</td>" +
                    "<td class=\"align-middle text-center text-sm\" id=" + unitID + ">" + unit + "</td>" +
                    "<td><a class=\"editproduct\" href =\"javascript:;\" onclick=\"editproduct(this)\"><i class=\"material-icons\">edit</i></a>" +
                    "<a href=\"javascript:;\" onclick=\"this.closest('tr').remove()\"><i class=\"material-icons\">delete</i></a></td>" +
                    +"</tr>";
                $("#tableProductRecord tbody").last().append(productRecord);
                $("#txtPrice").val("");
                $("#txtQuantity").val("");
                $("#txtUnit").prop('selectedIndex', 0);
                $("#txtProductName").val("");
                $("#txtProductName").focus();
            }
        }
        function GetProduct(code) {
            for (let i = 0; i < dataProduct.length; i++) {
                if (dataProduct[i].Code == code) {
                    return dataProduct[i];
                }
            }
        }
        function formatNumber(nStr, decSeperate, groupSeperate) {
            nStr += '';
            x = nStr.split(decSeperate);
            x1 = x[0];
            x2 = x.length > 1 ? '.' + x[1] : '';
            var rgx = /(\d+)(\d{3})/;
            while (rgx.test(x1)) {
                x1 = x1.replace(rgx, '$1' + groupSeperate + '$2');
            }
            return x1 + x2;
        }
        function setTime() {
            const dateControl = document.querySelector('input[type="datetime-local"]');
            dateControl.value = '@Model.Export.Time.ToString("yyyy-MM-ddTHH:mm")';
        };
        function editproduct(element) {
            var product = GetProduct($(element).closest("tr").find("td:eq(0)").attr('id'));
            var row = $(element).closest("tr");
            var name = $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(3) a:eq(0)').find('i').html();
            if (name == 'edit') {
                var quantity = $('#tableProductRecord tbody tr:eq(' + row.index() + ')').find('td:eq(1)').html();
                var inputQuantity = "<input type='number' value='" + quantity + "'/>";
                console.log(inputQuantity);
                $('#tableProductRecord>tbody>tr:eq(' + row.index() + ')').find('td:eq(1)').html("");
                $('#tableProductRecord>tbody>tr:eq(' + row.index() + ')').find('td:eq(1)').append(inputQuantity);
                $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(3)').find('a:eq(0)').html('<i class="material-icons">done</i>');
            }
            else {
                var quantity = $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(1)').find('input').val();
                if (quantity.trim().length == 0) {
                    $.alert('Vui lòng nhập số lượng sản phẩm');
                    $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(1)').find('input').focus();
                    return;
                }
                else {
                    var name = $('#tableProductRecord tbody tr:eq(' + row.index() + ')').find('td:eq(0)').html();
                    var currentquantity = product.Quantity;
                    if (parseInt(quantity) > parseInt(currentquantity)) {
                        $.alert('Sản phẩm này chỉ còn ' + currentquantity + '');
                        $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(1)').find('input').val(currentquantity);
                        return;
                    }
                    $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(1)').find('input').remove();
                    $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(1)').find('input').remove();
                    $('#tableProductRecord>tbody>tr:eq(' + row.index() + ')').find('td:eq(1)').html(quantity);
                    $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(3)').find('a:eq(0)').html('<i class="material-icons">edit</i>');
                }

            }
        };
        function getCustomerCode(name) {
            var code = "";
            dataCustomer.forEach(item => {
                if (item.Name.trim() == name.trim()) {
                    code = item.CustomerCode;
                }
            });
            return code;
        }
        function SaveProduct() {
            if ($('#txtCustomerName').val() == "") {
                $.alert("Vui lòng nhập tên khách hàng");
                $('#txtCustomerName').focus();
                return;
            }
            var listProduct = new Array();
            var table = $('#tableProductRecord tbody tr');
            var count = 0;
            table.each(function () {
                if ($(this).find('td:eq(3)').find('i').html().trim() == 'done') {
                    count++;
                }
            })
            if (count != 0) {
                $.alert('Vui lòng hoàn thành chỉnh sửa trước khi lưu phiếu xuất');
                return;
            }
            table.each(function () {
                var Code = $(this).find("td:eq(0)").attr('id');
                var Price = 0
                var Quantity = $(this).find("td:eq(1)").text();
                var UnitID = $(this).find("td:eq(2)").attr('id');
                var Time = $("#txtTime").val();
                var Note = $("#txtNote").val();
                var NameCustomer = $("#txtCustomerName").val();
                var CustomerCode = getCustomerCode(NameCustomer);
                var Delivery = $('#txtDelivery').val();
                var Status = $('#txtStatus').val();
                var ExportCode = '@Model.Export.Code';
                var ProductModel = {};
                ProductModel.Code = ExportCode;
                ProductModel.Status = Status;
                ProductModel.NameCustomer = NameCustomer;
                ProductModel.CustomerCode = CustomerCode;
                ProductModel.Delivery = Delivery;
                ProductModel.Price = Price;
                ProductModel.Quantity = Quantity;
                ProductModel.ProductCode = Code;
                ProductModel.Time = Time;
                ProductModel.Note = Note;
                ProductModel.UnitID = UnitID;
                listProduct.push(ProductModel);
            });

            if (listProduct.length == 0) {
                $.alert('Vui lòng thêm ít nhất 1 sản phẩm');
                return;
            }

            $.post('/ListReceiptExport/Edit/', { model: listProduct }, function (result) {
                if (result == 1) {
                    var obj = $.alert({
                        title: 'Thông báo',
                        content: 'Cập nhật phiếu xuất thành công',
                    });
                    setTimeout(function () {
                        obj.close();
                    }, 1500);
                }
                else {
                    $.alert('Cập nhật phiếu xuất thất bại');
                }
            });
    };
</script>
}