@model InventoryManagerment.Models.EF.ImportForm
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    var db = new InventoryManagerment.Models.EF.InventoryDbContext();
    var userName = Request.Cookies[InventoryManagerment.Common.CommonConstants.USER_DATA];
    var user = new DataAccess().GetUser(userName[InventoryManagerment.Common.CommonConstants.USER_NAME]);
    string GetProductName(string code)
    {
        var product = db.Products.Where(x => x.Code == code).FirstOrDefault();
        return db.ProductCategories.Find(product.CategoryID).Name + " | " + product.Name + " | " + db.Packages.Find(product.PackageID).Name;
    }
    string GetUnitName(long id)
    {
        if (id == 0)
        {
            return "Chưa set đơn vị tính";
        }
        else
        {
            var product = db.Units.Find(id);
            return product.Name;
        }
    }
    var listCategory = db.ProductCategories.ToList();
    var listUnit = db.Units.ToList();
    var listPackage = db.Packages.ToList();
}
<div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title font-weight-normal" id="productModalLabel">Thêm sản phẩm mới</h5>
                <button type="button" class="btn-close text-dark" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="input-group input-group-static my-3">
                    <label>Tên sản phẩm</label>
                    <input id="txtNameProduct" class="form-control" />
                </div>

                <div class="input-group input-group-static my-3">
                    <label>Loại sản phẩm</label>
                    <select id="txtCategoryID" class="form-control">
                        <option value="0">Chọn loại sản phẩm</option>
                        @foreach (var item in listCategory)
                        {
                            <option value="@item.ID">@item.Name</option>
                        }
                    </select>
                </div>

                <div class="input-group input-group-static my-3">
                    <label>Giá</label>
                    <input class="form-control" id="txtPriceProduct" />
                </div>

                <div class="input-group input-group-static my-3">
                    <label>Đơn vị tính</label>
                    <select class="form-control" id="txtUnitProduct">
                        <option value="0">Chọn đơn vị tính</option>
                        @foreach (var item in listUnit)
                        {
                            <option value="@item.ID">@item.Name</option>
                        }
                    </select>
                </div>

                <div class="input-group input-group-static my-3">
                    <label>Cách đóng gói</label>
                    <select class="form-control" id="txtPackageProduct">
                        <option value="0">Chọn cách đóng gói</option>
                        @foreach (var item in listPackage)
                        {
                            <option value="@item.ID">@item.Name</option>
                        }
                    </select>
                </div>

                <div style="margin-top:40px !important;" class="input-group input-group-static my-3">
                    <label>Số lượng tối thiểu</label>
                    <input class="form-control" id="txtAlertQuantity" />
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn bg-gradient-secondary" data-bs-dismiss="modal">Đóng</button>
                    <button id="btnSaveProduct" type="submit" class="btn bg-gradient-primary" data-bs-dismiss="modal">Lưu sản phẩm</button>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="supplierModal" tabindex="-1" role="dialog" aria-labelledby="supplierModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title font-weight-normal" id="supplierModalLabel">Thêm nhà cung cấp mới</h5>
                <button type="button" class="btn-close text-dark" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="input-group input-group-static my-3">
                    <label>Tên nhà cung cấp</label>
                    <input name="txtNameSupplier" id="txtNameSupplier" class="form-control" />
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn bg-gradient-secondary" data-bs-dismiss="modal">Đóng</button>
                    <button id="btnSaveSupplier" type="submit" data-bs-dismiss="modal" class="btn bg-gradient-primary">Lưu nhà cung cấp</button>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <h6>@TempData[InventoryManagerment.Common.CommonConstants.PAGE_NAME]</h6>
    <div class="input-group input-group-static my-3">
        <label>Ngày nhập</label>
        <input type="datetime-local" id="txtTime" name="txtTime" class="form-control" value="@Model.Import.Time.ToString("yyyy-MM-ddTHH:mm")" />
    </div>
    <div class="input-group input-group-static my-3 is-filled">
        <label>Nhà cung cấp</label>
        <input disabled id="txtSupplier" type="text" class="form-control" placeholder="Nhập tên khách hàng" value="@db.Suppliers.Where(x=>x.ID == Model.Import.SupplierID).FirstOrDefault().Name" />
        <span onclick="showInfo()" style="cursor:pointer;" class="input-group-text" id="basic-addon2"><a href="javascript:;" data-bs-toggle="modal" data-bs-target="#exampleModal"><i title="tooltip" id="btnShowInfo" class="material-icons opacity-10">infor</i></a></span>
        <!-- Modal -->
        <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title font-weight-normal" id="exampleModalLabel"><i title="tooltip" id="btnShowInfo" class="material-icons opacity-10">person</i>Thông tin khách hàng</h5>
                        <button type="button" class="btn-close text-dark" data-bs-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div id="modalBody" class="modal-body">

                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="input-group input-group-static my-3">
        <label>Ghi chú</label>
        <textarea id="txtNote" name="txtNote" class="form-control" rows="5" placeholder="Nhập ghi chú"></textarea>
    </div>
</div>
<div class="row">
    <h6>Thêm sản phẩm</h6>
    <div class="col-md-4">
        <div class="input-group input-group-dynamic my-3">
            <input class="form-control" type="text" placeholder="Nhập tên sản phẩm" id="txtProductName" />
        </div>
    </div>
    <div class="col-md-3">
        <div class="input-group input-group-dynamic my-3">
            <input type="number" value="" name="quantityProduct" placeholder="Số lượng" id="txtQuantity" class="form-control" />
        </div>
    </div>
    <div class="col-md-3">
        <div class="input-group input-group-dynamic my-3">
            <select id="txtUnit" class="form-control">
                <option value="null">Chọn đơn vị tính</option>
                @foreach (var item in db.Units.ToList())
                {
                    <option value="@item.ID">@item.Name</option>
                }
            </select>
        </div>
    </div>
    <div class="col-md-2">
        <input type="button" id="btnAddProduct" class="btn btn-primary" value="Thêm sản phẩm" />
    </div>
</div>
<div class="row">
    <h6>Danh sách sản phẩm</h6>
    <div class="card-body px-0 pb-2">
        <div class="table-responsive p-0    ">
            <table class="table align-items-center mb-0" id="tableProductRecord">
                <thead>
                    <tr>
                        <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Tên sản phẩm</th>
                        <th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Số lượng</th>
                        <th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Đơn vị tính</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.importDetails)
                    {
                        <tr>
                            <td class="text-sm" id="@item.ProductCode">@GetProductName(item.ProductCode)</td>
                            <td class="align-middle text-center text-sm">@item.Quantity</td>
                            <td class="align-middle text-center text-sm" id="@item.UnitID">@GetUnitName(item.UnitID)</td>
                            <td><a class="editproduct" href="javascript:;" onclick="editproduct(this)"><i class="material-icons">edit</i></a><a href="javascript:;" onclick="this.closest('tr').remove()"><i class="material-icons">delete</i></a></td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>
<div class="row col-sm-2">
    <input type="button" id="btnSave" name="SaveData" value="Cập nhật phiếu xuất" class="btn btn-success" />
</div>
@section jsFooter{
    <script>
        @*var dataProduct = [];
        var nameCodeProduct = [];
        var dataCustomer = [];
        var nameCustomers = [];
        var nameProducts = [];
        $(document).ready(function () {
            SetAutoComplete();
            setTime();
            $("#btnSave").click(function () {
                SaveProduct();
            });
            $('#txtStatus option[value=@Model.Import.Status]').attr('selected', 'selected');
            $("#btnAddProduct").click(function () {
                AddProductRecord();
            });
            $('#txtProductName').focusout(function () {
                var name = $('#txtProductName').val();
                var codeCurrentProduct = "";
                for (let i = 0; i < nameCodeProduct.length; i++) {
                    if (nameCodeProduct[i].Name == name.trim()) {
                        codeCurrentProduct = nameCodeProduct[i].ProductCode;
                        break;
                    }
                }
                if (name.trim().length != 0) {
                    if (codeCurrentProduct.trim().length != 0) {
                        var product = GetProduct(codeCurrentProduct);
                        $("#txtPrice").val(product.Price);
                        $("#txtUnit").val(product.UnitID);
                        $("#txtQuantity").focus();
                    }
                    else {
                        $.confirm({
                            title: 'Thông báo',
                            content: 'Sản phẩm bạn vừa nhập không tồn tại, vui lòng kiểm tra lại',
                            buttons: {
                                confirm:
                                {
                                    text: 'Điều chỉnh tên sản phẩm',
                                    action: function () {
                                        $("#txtQuantity").val("");
                                        $("#txtPrice").val("");
                                        $("#txtUnit").val(0);
                                        $("#txtProductName").focus();
                                    }
                                },
                                remove: {
                                    text: 'Xóa tên sản phẩm',
                                    action: function () {
                                        $("#txtProductName").val("");
                                        $("#txtQuantity").val("");
                                        $("#txtPrice").val("");
                                        $("#txtUnit").val(0);
                                        $("#txtProductName").focus();
                                    }
                                }
                            }
                        });
                    }
                }
            });
            $('#txtCustomerName').focusout(function () {
                var name = $("#txtCustomerName").val();
                if (jQuery.inArray(name.trim(), nameCustomers) != -1 && text != "") {
                    $('#txtCustomerName').val(name.trim());
                } else {
                    $.confirm({
                        title: 'Thông báo!',
                        content: 'Vì đây là chỉnh sửa phiếu xuất nên vui lòng nhập tên khách hàng có tồn tại!',
                        buttons: {
                            confirm: {
                                text: 'Đồng ý',
                                action: function () {
                                    $('#txtCustomerName').focus();
                                }
                            }
                        }
                    });
                }
            });
        });
        function SetAutoComplete() {
            dataProduct = [];
            dataCustomer = [];
            nameCustomers = [];
            nameProducts = [];
            $.get("/Import/SetAutoComplete/", "", function (data) {
                $.each(data.ListCustomers, function (index, value) {
                    dataCustomer.push(value);
                    nameCustomers.push(value.Name);
                })
                $.each(data.ListProducts, function (index, value) {
                    nameCodeProduct.push(value);
                    nameProducts.push(value.Name)
                });
                $.each(data.DataProducts, (i, value) => {
                    dataProduct.push(value);
                })
                AutoComplete(nameProducts, $('#txtProductName'));
                AutoComplete(nameCustomers, $('#txtCustomerName'));
            })
        }
        function AutoComplete(data, element) {
            element.autocomplete({
                source: data,
                minLength: 0,
            },
                {
                    autoFocus: true,
                    delay: 0,
                });
        }
        function AddProductRecord() {
            if ($('#txtProductName').val().length == 0) {
                $.alert('Vui lòng nhập sản phẩm');
                $('#txtProductName').focus();
                return;
            }
            if ($("#txtQuantity").val().length == 0 || parseInt($("#txtQuantity").val()) == 0) {
                $.alert('Vui lòng nhập số lượng');
                $('#txtQuantity').focus();
                return
            }
            if ($("#txtUnit option:selected").val() == 'null') {
                $.alert('Vui lòng chọn đơn vị tính');
                $('#txtUnit').focus();
                return;
            }
            var temp = 0;
            $("#tableProductRecord tbody tr").each(function () {
                var name = $("#txtProductName").val();
                if ($(this).find("td:eq(0)").html() == name) {
                    temp += 1;
                }
            });
            if (temp > 0) {
                $.alert('Sản phẩm này đã tồn tại vui lòng kiểm tra lại');
                $('#txtProductName').focus();
                return;
            }
            var name = $('#txtProductName').val();
            var productCode = "";
            for (let i = 0; i < nameCodeProduct.length; i++) {
                if (nameCodeProduct[i].Name == name.trim()) {
                    productCode = nameCodeProduct[i].ProductCode;
                    break;
                }
            }
            var product = GetProduct(productCode);
            var quantity = $("#txtQuantity").val();
            var unit = $("#txtUnit option:selected").text();
            var unitID = $("#txtUnit option:selected").val();
            var productRecord = "<tr><td class=\"text-sm\"  id=" + productCode + ">" + name + "</td>" +
                "<td class=\"align-middle text-center text-sm\">" + quantity + "</td>" +
                "<td class=\"align-middle text-center text-sm\" id=" + unitID + ">" + unit + "</td>" +
                "<td><a class=\"editproduct\" href =\"javascript:;\" onclick=\"editproduct(this)\"><i class=\"material-icons\">edit</i></a>" +
                "<a href=\"javascript:;\" onclick=\"this.closest('tr').remove()\"><i class=\"material-icons\">delete</i></a></td>" +
                +"</tr>";
            $("#tableProductRecord tbody").last().append(productRecord);
            $("#txtPrice").val("");
            $("#txtQuantity").val("");
            $("#txtUnit").prop('selectedIndex', 0);
            $("#txtProductName").val("");
            $("#txtProductName").focus();
        }
        function GetProduct(code) {
            for (let i = 0; i < dataProduct.length; i++) {
                if (dataProduct[i].Code == code) {
                    return dataProduct[i];
                }
            }
        }
        function formatNumber(nStr, decSeperate, groupSeperate) {
            nStr += '';
            x = nStr.split(decSeperate);
            x1 = x[0];
            x2 = x.length > 1 ? '.' + x[1] : '';
            var rgx = /(\d+)(\d{3})/;
            while (rgx.test(x1)) {
                x1 = x1.replace(rgx, '$1' + groupSeperate + '$2');
            }
            return x1 + x2;
        }
        function setTime() {
            const dateControl = document.querySelector('input[type="datetime-local"]');
            dateControl.value = '@Model.Import.Time.ToString("yyyy-MM-ddTHH:mm")';
        };
        function editproduct(element) {
            var product = GetProduct($(element).closest("tr").find("td:eq(0)").attr('id'));
            var row = $(element).closest("tr");
            var name = $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(3) a:eq(0)').find('i').html();
            if (name == 'edit') {
                var quantity = $('#tableProductRecord tbody tr:eq(' + row.index() + ')').find('td:eq(1)').html();
                var inputQuantity = "<input type='number' value='" + quantity + "'/>";
                $('#tableProductRecord>tbody>tr:eq(' + row.index() + ')').find('td:eq(1)').html("");
                $('#tableProductRecord>tbody>tr:eq(' + row.index() + ')').find('td:eq(1)').append(inputQuantity);
                $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(3)').find('a:eq(0)').html('<i class="material-icons">done</i>');
            }
            else {
                var quantity = $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(1)').find('input').val();
                if (quantity.trim().length == 0) {
                    $.alert('Vui lòng nhập số lượng sản phẩm');
                    $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(1)').find('input').focus();
                    return;
                }
                else {
                    var name = $('#tableProductRecord tbody tr:eq' + row.index() + ')').find('td:eq(0)').html();
                    $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(1)').find('input').remove();
                    $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(1)').find('input').remove();
                    $('#tableProductRecord>tbody>tr:eq(' + row.index() + ')').find('td:eq(1)').html(quantity);
                    $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(3)').find('a:eq(0)').html('<i class="material-icons">edit</i>');
                }

            }
        };
        function getCustomerCode(name) {
            var code = "";
            dataCustomer.forEach(item => {
                if (item.Name.trim() == name.trim()) {
                    code = item.CustomerCode;
                }
            });
            return code;
        }
        function SaveProduct() {
            if ($('#txtCustomerName').val() == "") {
                $.alert("Vui lòng nhập tên khách hàng");
                $('#txtCustomerName').focus();
                return;
            }
            var listProduct = new Array();
            var table = $('#tableProductRecord tbody tr');
            var count = 0;
            table.each(function () {
                if ($(this).find('td:eq(3)').find('i').html().trim() == 'done') {
                    count++;
                }
            })
            if (count != 0) {
                $.alert('Vui lòng hoàn thành chỉnh sửa trước khi lưu phiếu xuất');
                return;
            }
            table.each(function () {
                var Code = $(this).find("td:eq(0)").attr('id');
                var Price = 0
                var Quantity = $(this).find("td:eq(1)").text();
                var UnitID = $(this).find("td:eq(2)").attr('id');
                var Time = $("#txtTime").val();
                var Note = $("#txtNote").val();
                var NameCustomer = $("#txtCustomerName").val();
                var CustomerCode = getCustomerCode(NameCustomer);
                var Delivery = $('#txtDelivery').val();
                var Status = $('#txtStatus').val();
                var ImportCode = '@Model.Import.Code';
                var ProductModel = {};
                ProductModel.Code = ImportCode;
                ProductModel.Status = Status;
                ProductModel.NameCustomer = NameCustomer;
                ProductModel.CustomerCode = CustomerCode;
                ProductModel.Delivery = Delivery;
                ProductModel.Price = Price;
                ProductModel.Quantity = Quantity;
                ProductModel.ProductCode = Code;
                ProductModel.Time = Time;
                ProductModel.Note = Note;
                ProductModel.UnitID = UnitID;
                listProduct.push(ProductModel);
            });

            if (listProduct.length == 0) {
                $.alert('Vui lòng thêm ít nhất 1 sản phẩm');
                return;
            }

            $.post('/ListReceiptExport/Edit/', { model: listProduct }, function (result) {
                if (result == 1) {
                    var obj = $.alert({
                        title: 'Thông báo',
                        content: 'Cập nhật phiếu xuất thành công',
                    });
                    setTimeout(function () {
                        obj.close();
                    }, 1500);
                }
                else {
                    $.alert('Cập nhật phiếu xuất thất bại');
                }
            });
    };*@
    </script>
    <script>
            var dataProduct = [];
        var nameCodeProduct = [];
        var dataSupplier = [];
        var nameSupplier = [];
        var nameProducts = [];
        let RoleID = '@db.Roles.Find(user.RoleID).ID';
        $(document).ready(function () {
            SetAutoComplete();
            $('#txtStatus option[value=@Model.Import.Status]').attr('selected', 'selected');
            $("#btnSaveProduct").click(function () {
                AddNewProduct();
            });
            $("#btnSaveSupplier").click(function () {
                AddNewSupplier();
            })
            $('#txtProductName').focusout(function () {
                var name = $('#txtProductName').val();
                if (nameProducts.includes(name)) {
                    var nameafterEdit = name.split("|")[1].trim();
                    var product = dataProduct.find(product => product.Name == nameafterEdit);
                    $("#txtUnit").val(product.UnitID);
                } else {
                    $.confirm({
                        title: 'Thông báo',
                        content: 'Sản phẩm vừa nhập không tồn tại?',
                        buttons: {
                            confirm:
                            {
                                text: 'Thêm mới',
                                action: function () {
                                    $("#txtNameProduct").val(name);
                                    $('#productModal').modal('show');
                                }
                            },
                            remove: {
                                text: 'Điều chỉnh tên sản phẩm',
                                action: function () {
                                    $("#txtQuantity").val("");
                                    $("#txtPrice").val("");
                                    $("#txtUnit").val(0);
                                    $("#txtProductName").focus();
                                }
                            }
                        }
                    });
                }
            });
            $('#btnAddProduct').click(() => AddProductRecord());
            $('#txtSupplier').focusout(function () {
                var name = $('#txtSupplier').val();
                if (!nameSupplier.includes(name) && name.trim().length !=0) {
                    $.confirm({
                        title: 'Thông báo',
                        content: 'Nhà cung cấp không tồn tại?',
                        buttons: {
                            confirm:
                            {
                                text: 'Thêm mới',
                                action: function () {
                                    $("#txtNameSupplier").val(name);
                                    $('#supplierModal').modal('show');
                                }
                            },
                            remove: {
                                text: 'Điều chỉnh',
                                action: function () {
                                    $("#txtSupplier").focus();
                                }
                            },
                            cancel: {
                                text: 'Thêm sau',
                            }
                        }
                    });
                }
            });
            $('#btnSave').click(function () {
                SaveProduct();
            })
        })
        function editproduct(element) {
            if (RoleID == 1) {
                var product = dataProduct.find(x => x.Code == $(element).closest("tr").find("td:eq(0)").attr('id'));
                var row = $(element).closest("tr");
                var name = $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(5) a:eq(0)').find('i').html();
                if (name == 'edit') {
                    var price = $('#tableProductRecord tbody tr:eq(' + row.index() + ')').find('td:eq(1)').html();
                    var quantity = $('#tableProductRecord tbody tr:eq(' + row.index() + ')').find('td:eq(2)').html();
                    var inputPrice = "<input type='text' value=" + price.replace(',', '') + ">";
                    var inputQuantity = "<input type='number' value=" + quantity + ">";
                    $('#tableProductRecord>tbody>tr:eq(' + row.index() + ')').find('td:eq(1)').html("");
                    $('#tableProductRecord>tbody>tr:eq(' + row.index() + ')').find('td:eq(2)').html("");
                    $('#tableProductRecord>tbody>tr:eq(' + row.index() + ')').find('td:eq(1)').append(inputPrice);
                    $('#tableProductRecord>tbody>tr:eq(' + row.index() + ')').find('td:eq(2)').append(inputQuantity);
                    $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(5)').find('a:eq(0)').html('<i class="material-icons">done</i>');
                }
                else {
                    var price = $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(1)').find('input').val();
                    var quantity = $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(2)').find('input').val();
                    var name = $('#tableProductRecord tbody tr:eq(' + row.index() + ')').find('td:eq(0)').html();
                    if (!$.isNumeric(price.replace(',', ''))) {
                        $.alert("Vui lòng nhập số")
                        $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(1)').find('input').focus();
                        return;
                    }
                    var total = price.replace(',', '') * quantity;
                    $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(1)').find('input').remove();
                    $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(2)').find('input').remove();
                    $('#tableProductRecord>tbody>tr:eq(' + row.index() + ')').find('td:eq(1)').html(formatNumber(price, '.', ','));
                    $('#tableProductRecord>tbody>tr:eq(' + row.index() + ')').find('td:eq(2)').html(quantity);
                    $('#tableProductRecord>tbody>tr:eq(' + row.index() + ')').find('td:eq(4)').html(formatNumber(total, '.', ','));
                    $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(5)').find('a:eq(0)').html('<i class="material-icons">edit</i>');
                }
            }
            else {
                var product = GetProduct($(element).closest("tr").find("td:eq(0)").attr('id'));
                var row = $(element).closest("tr");
                var name = $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(3) a:eq(0)').find('i').html();
                if (name == 'edit') {
                    var quantity = $('#tableProductRecord tbody tr:eq(' + row.index() + ')').find('td:eq(1)').html();
                    var inputQuantity = "<input type='number' value='" + quantity + "'/>";
                    $('#tableProductRecord>tbody>tr:eq(' + row.index() + ')').find('td:eq(1)').html("");
                    $('#tableProductRecord>tbody>tr:eq(' + row.index() + ')').find('td:eq(1)').append(inputQuantity);
                    $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(3)').find('a:eq(0)').html('<i class="material-icons">done</i>');
                }
                else {
                    var quantity = $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(1)').find('input').val();
                    if (quantity.trim().length == 0) {
                        $.alert('Vui lòng nhập số lượng sản phẩm');
                        $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(1)').find('input').focus();
                        return;
                    }
                    else {
                        var name = $('#tableProductRecord tbody tr:eq(' + row.index() + ')').find('td:eq(0)').html();
                        $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(1)').find('input').remove();
                        $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(1)').find('input').remove();
                        $('#tableProductRecord>tbody>tr:eq(' + row.index() + ')').find('td:eq(1)').html(quantity);
                        $('#tableProductRecord tbody tr:eq(' + row.index() + ') td:eq(3)').find('a:eq(0)').html('<i class="material-icons">edit</i>');
                    }
                }
            }
        }
        function ClearState() {
            $('#txtNameProduct').val("");
            $("#txtCategoryID").prop('selectedIndex', 0);
            $('#txtPriceProduct').val("");
            $("#txtUnitProduct").prop('selectedIndex', 0);
            $("#txtPackageProduct").prop('selectedIndex', 0);
            $('#txtAlertQuantity').val("");
        }
        function AddProductRecord() {
            if ($('#txtProductName').val().length == 0) {
                $.alert('Vui lòng nhập sản phẩm');
                $('#txtProductName').focus();
                return;
            }
            if ($("#txtQuantity").val().length == 0) {
                $.alert('Vui lòng nhập số lượng');
                $('#txtQuantity').focus();
                return
            }
            if ($("#txtUnit option:selected").val() == 'null') {
                $.alert('Vui lòng chọn đơn vị tính');
                $('#txtUnit').focus();
                return;
            }
            var temp = 0;
            $("#tableProductRecord tbody tr").each(function () {
                var name = $("#txtProductName").val();
                if ($(this).find("td:eq(0)").html() == name) {
                    temp += 1;
                }
            });
            if (temp > 0) {
                $.alert('Sản phẩm này đã tồn tại vui lòng kiểm tra lại');
                $('#txtProductName').focus();
                return;
            }
            var name = $('#txtProductName').val();
            var nameAfterEdit = name.substring(name.indexOf('|') + 1, name.lastIndexOf('|')).trim();
            var product = dataProduct.find(x => x.Name == nameAfterEdit);
            if (!product) {
                $.alert('Sản phẩm này không tồn tại');
                return;
            }
            if (RoleID == 1) {
                var name = $('#txtProductName').val();
                var productCode = product.Code
                var price = $("#txtPrice").val();
                var quantity = $("#txtQuantity").val();
                var total = formatNumber(price*quantity,'.',',')
                var unit = $("#txtUnit option:selected").text();
                var unitID = $("#txtUnit option:selected").val();
                var productRecord = "<tr><td class=\"text-sm\"  id='" + productCode + "'>" + name + "</td>" +
                    "<td class=\"align-middle text-center text-sm\">" + formatNumber(price.toString(), '.', ',') + "</td>" +
                    "<td class=\"align-middle text-center text-sm\">" + quantity + "</td>" +
                    "<td class=\"align-middle text-center text-sm\" id=" + unitID + ">" + unit + "</td>" +
                    "<td class=\"align-middle text-center text-sm\">" + total + "</td>" +
                    "<td><a class=\"editproduct\" href =\"javascript:;\" onclick=\"editproduct(this)\"><i class=\"material-icons\">edit</i></a>" +
                    "<a href=\"javascript:;\" onclick=\"this.closest('tr').remove()\"><i class=\"material-icons\">delete</i></a></td>" +
                    +"</tr>";
                $("#tableProductRecord tbody").last().append(productRecord);
                $("#txtPrice").val("");
                $("#txtQuantity").val("");
                $("#txtUnit").prop('selectedIndex', 0);
                $("#txtPackage").prop('selectedIndex', 0);
                $("#txtProductName").val("");
                $("#txtProductName").val("");
            }
            else {
                var name = $('#txtProductName').val();
                var nameAfterEdit = name.substring(name.indexOf('|') + 1, name.lastIndexOf('|')).trim();
                var productCode = product.Code
                var quantity = $("#txtQuantity").val();
                var unit = $("#txtUnit option:selected").text();
                var unitID = $("#txtUnit option:selected").val();
                var productRecord = "<tr><td class=\"text-sm\"  id='" + productCode + "'>" + name + "</td>" +
                    "<td class=\"align-middle text-center text-sm\">" + quantity + "</td>" +
                    "<td class=\"align-middle text-center text-sm\" id=" + unitID + ">" + unit + "</td>" +
                    "<td><a class=\"editproduct\" href =\"javascript:;\" onclick=\"editproduct(this)\"><i class=\"material-icons\">edit</i></a>" +
                    "<a href=\"javascript:;\" onclick=\"this.closest('tr').remove()\"><i class=\"material-icons\">delete</i></a></td>" +
                    +"</tr>";
                $("#tableProductRecord tbody").last().append(productRecord);
                $("#txtPrice").val("");
                $("#txtQuantity").val("");
                $("#txtUnit").prop('selectedIndex', 0);
                $("#txtPackage").prop('selectedIndex', 0);
                $("#txtProductName").val("");
            }
        };
        function GetProduct(code) {
            return dataProduct.find(product => product.Code == code);
        }
        function SetAutoComplete() {
            dataProduct = [];
            nameCodeProduct = [];
            dataSupplier = [];
            nameSupplier = [];
            nameProducts = [];
            $.get("/Import/SetAutoComplete/", "", function (data) {
                dataProduct.push(...data.ListProducts)
                dataSupplier.push(...data.ListSupplier);
                nameCodeProduct.push(...data.NameCodeProduct);
                nameProducts.push(...data.NameProduct);
                nameSupplier.push(...data.NameSupplier);

                AutoComplete(nameProducts, $('#txtProductName'));
                AutoComplete(nameSupplier, $('#txtSupplier'));
            })
        }
        function AutoComplete(data, element) {
            element.autocomplete({
                source: data,
                minLength: 0,
            },
                {
                    autoFocus: true,
                    delay: 0,
                });
        }
        function formatNumber(nStr, decSeperate, groupSeperate) {
            nStr += '';
            x = nStr.split(decSeperate);
            x1 = x[0];
            x2 = x.length > 1 ? '.' + x[1] : '';
            var rgx = /(\d+)(\d{3})/;
            while (rgx.test(x1)) {
                x1 = x1.replace(rgx, '$1' + groupSeperate + '$2');
            }
            return x1 + x2;
        };
        function AddNewSupplier() {
            var nameSupplier = $('#txtNameSupplier').val();
            var codeSupplier = '';
            $.post('/Import/CreateSupplier/', { name: nameSupplier, code: codeSupplier }, function () {
                SetAutoComplete();
                $("#txtNameSupplier").val(nameSupplier);
                $.alert("Thêm nhà cung cấp thành công");
            });
        }
        function AddNewProduct() {
            var nameProduct = $('#txtNameProduct').val();
            var categoryID = $('#txtCategoryID option:selected').val();
            var priceProduct = $('#txtPriceProduct').val();
            var unitID = $('#txtUnitProduct option:selected').val();
            var categoryName = $('#txtCategoryID option:selected').text();
            var packageName = $('#txtPackageProduct option:selected').text();
            var packageID = $('#txtPackageProduct option:selected').val();
            var quantityAlert = $('#txtAlertQuantity').val();
            var categoryName = $('#txtCategoryID option:selected').text();

            if (nameProduct.length == 0) {
                $.alert('Vui lòng nhập tên sản phẩm');
                $('#txtNameProduct').focus();
                return;
            }
            if (categoryID == 0) {
                $.alert('Vui lòng chọn loại sản phẩm');
                $('##txtCategoryID').focus();
                return;
            }
            if (priceProduct.length == 0) {
                $.alert('Vui lòng nhập giá sản phẩm');
                $('#txtPriceProduct').focus();
                return;
            }
            if (unitID == 0) {
                $.alert('Vui lòng chọn đơn vị tính');
                $('#txtUnitProduct').focus();
                return;
            }
            if (packageID == 0) {
                $.alert('Vui lòng chọn cách đóng gói');
                $('#txtPackageProduct').focus();
                return;
            }
            if (quantityAlert.length == 0) {
                $.alert('Vui lòng nhập số lượng tối thiểu');
                $('#txtAlertQuantity').focus();
                return;
            }
            if (!$.isNumeric(priceProduct)) {
                $.alert('Vui lòng nhập giá là giá trị số');
                return;
            }
            if (!$.isNumeric(quantityAlert)) {
                $.alert('Vui lòng nhập số lượng tối thiểu là giá trị số');
                return;
            }

            var product = {};
            product.Code = '';
            product.Name = nameProduct.trim();
            product.CategoryID = categoryID;
            product.Price = priceProduct;
            product.UnitID = unitID;
            product.PackageID = packageID;
            product.QuantityAlert = quantityAlert;
            $.post("/Import/CreateProduct/", { product: product }, function () {
                SetAutoComplete();
                ClearState();
                var tensanpham = categoryName.trim() + " | " + nameProduct.trim() + " | " + packageName.trim();
                $('#txtProductName').val(tensanpham);
                $("#txtUnit").val(product.UnitID);
                $.alert("Thêm sản phẩm thành công");
                $("#txtQuantity").focus();
            });
        }
        function SaveProduct() {
            var listProduct = new Array();
            var table = $('#tableProductRecord tbody tr');
            var i = 0;
            table.each(function () {
                var name = $(this).find("td:eq(5)").find("a:eq(0)").find("i").html();
                if (name == "done") {
                    i++;
                    return;
                }
            });
            if ($('#txtSupplier').val().trim().length == 0) {
                $.alert('Vui lòng nhập nhà cung cấp');
                return;
            }
            if (!nameSupplier.includes($('#txtSupplier').val().trim())) {
                $.alert('Vui lòng thêm mới nhà cung cấp');
                return;
            }
            if (i > 0) {
                $.alert("Vui lòng hoàn tất việc chỉnh sửa");
                return;
            }
            table.each(function () {
                var Code = $(this).find("td:eq(0)").attr('id');
                var Quantity = $(this).find("td:eq(1)").text();
                var UnitID = dataProduct.find(x => x.Code == Code).UnitID;
                var PackageID = dataProduct.find(x => x.Code == Code).PackageID;
                var Time = $("#txtTime").val();
                var SupplierName = $('#txtSupplier').val();
                var SupplierCode = dataSupplier.find(x => x.Name == SupplierName).ID;
                var Note = $("#txtNote").val();
                var ProductModel = {};
                ProductModel.Code = '@Model.Import.Code';
                ProductModel.SupplierID = SupplierCode;
                ProductModel.Price = 0;
                ProductModel.Quantity = Quantity;
                ProductModel.ProductCode = Code;
                ProductModel.Time = Time;
                ProductModel.NameSupplier = SupplierName;
                ProductModel.Note = Note;
                ProductModel.UnitID = UnitID;
                ProductModel.PackageID = PackageID;
                listProduct.push(ProductModel);
            });
            if (listProduct.length == 0) {
                $.alert('Vui lòng thêm ít nhất một sản phẩm');
                return;
            }
            console.log(listProduct)
            $.post("/ListReceiptImport/Edit/", { model: listProduct }, function () {

                $.alert('Cập nhật phiếu nhập thành công');
            });

        }
    </script>
}